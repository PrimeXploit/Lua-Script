local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local owner = "PrimeX_GG"
local hub = "PrimeXploit"
local scriptName = "Grow a Garden"
local update = "30 / 5 / 25"
local discord_link = "Coming soon..."

local folder = hub
local file = folder .. "/Grow_a_Garden.json"

local HttpService = game:GetService("HttpService")

if not isfolder(folder) then makefolder(folder) end

if not isfile(file) then
    writefile(file, HttpService:JSONEncode({}))
end

local raw = readfile(file)
local Settings = HttpService:JSONDecode(raw) or {}

local defaults = {
    Plant = {
        Plant = {
            Select_Seeds = {},
            Auto_Plant = false
        },
        Harvert = {
            Select_Fruits = {},
            Select_Mutations = {},
            Auto_Harvert = false
        },
        Auto_Sell = {
            Select_Sell_Mode = {},
            Auto_Sell = false
        },
    },
    Egg = {
        Egg = {
            Select_Eggs_To_Place = {},
            Auto_Place_Egg = false,
            Auto_Hatch_Egg = false
        },
    },
    Event = {
        Night_And_Blood = {
            Auto_Take_All_Moon_Plant = false
        },
    },
    Shop = {
        Seed_Shop = {
            Select_Seeds = {},
            Auto_Buy_Seeds = false
        },
        Twilight_Shop = {
            Select_Items = {},
            Auto_Buy_Twilight_Shop = false
        },
        Blood_Shop = {
            Select_Items = {},
            Auto_Buy_Blood_Shop = false
        },
        Gear_Shop = {
            Select_Gears = {},
            Auto_Buy_Gears = false
        },
        Egg_Shop = {
            Select_Eggs = {},
            Auto_Buy_Eggs = false
        },
    },
}

for cat, tbl in pairs(defaults) do
    Settings[cat] = Settings[cat] or {}
    for sub, subTbl in pairs(tbl) do
        Settings[cat][sub] = Settings[cat][sub] or subTbl
    end
end

writefile(file, HttpService:JSONEncode(Settings))

-- Plant > Plant
local saved_Select_Seeds = Settings.Plant.Plant.Select_Seeds
local saved_Auto_Plant = Settings.Plant.Plant.Auto_Plant

-- Plant > Harvert
local saved_Harvest_Fruits = Settings.Plant.Harvert.Select_Fruits
local saved_Harvest_Mutations = Settings.Plant.Harvert.Select_Mutations
local saved_Auto_Harvest = Settings.Plant.Harvert.Auto_Harvert

-- Plant > Auto_Sell
local saved_Sell_Modes = Settings.Plant.Auto_Sell.Select_Sell_Mode
local saved_Auto_Sell = Settings.Plant.Auto_Sell.Auto_Sell

-- Egg > Egg
local saved_Eggs_To_Place = Settings.Egg.Egg.Select_Eggs_To_Place
local saved_Auto_Place_Egg = Settings.Egg.Egg.Auto_Place_Egg
local saved_Auto_Hatch_Egg = Settings.Egg.Egg.Auto_Hatch_Egg

-- Event > Night_And_Blood
local saved_Auto_Take_All_Moon_Plant = Settings.Event.Night_And_Blood.Auto_Take_All_Moon_Plant

-- Shop > Seed_Shop
local saved_Seed_Shop_Seeds = Settings.Shop.Seed_Shop.Select_Seeds
local saved_Auto_Buy_Seeds = Settings.Shop.Seed_Shop.Auto_Buy_Seeds

-- Shop > Twilight_Shop
local saved_Twilight_Items = Settings.Shop.Twilight_Shop.Select_Items
local saved_Auto_Buy_Twilight = Settings.Shop.Twilight_Shop.Auto_Buy_Twilight_Shop

-- Shop > Blood_Shop
local saved_Blood_Items = Settings.Shop.Blood_Shop.Select_Items
local saved_Auto_Buy_Blood = Settings.Shop.Blood_Shop.Auto_Buy_Blood_Shop

-- Shop > Gear_Shop
local saved_Gear_Shop = Settings.Shop.Gear_Shop.Select_Gears
local saved_Auto_Buy_Gears = Settings.Shop.Gear_Shop.Auto_Buy_Gears

-- Shop > Egg_Shop
local saved_Egg_Shop = Settings.Shop.Egg_Shop.Select_Eggs
local saved_Auto_Buy_Eggs = Settings.Shop.Egg_Shop.Auto_Buy_Eggs

local plant_data = {
    locations = {
        ["Plant"] = {
            [1] = "11.563638687133789, 0.13552704453468323, -82.81863403320312",
            [2] = "55.83573913574219, 0.13552704453468323, -82.78843688964844"
        },
        ["Place Egg"] = {
            [1] = "25, 0.13552704453468323, -76.15",
            [2] = "20, 0.13552704453468323, -76.15",
            [3] = "15, 0.13552704453468323, -76.15",
            [4] = "10, 0.13552704453468323, -76.15",
            [5] = "25, 0.13552704453468323, -79.15",
            [6] = "20, 0.13552704453468323, -79.15",
            [7] = "15, 0.13552704453468323, -79.15",
            [8] = "10, 0.13552704453468323, -79.15"
        }
    },

    mutations = {
        "Shocked",
        "Twisted",
        "Wet",
        "Chilled",
        "Frozen",
        "Disco",
        "Choc",
        "Plasma",
        "Burnt",
        "Moonlit",
        "Bloodlit",
        "Zombified",
        "Celestial"
    },

    shop = {
        "Carrot",
        "Strawberry",
        "Blueberry",
        "Orange Tulip",
        "Tomato",
        "Corn",
        "Daffodil",
        "Watermelon",
        "Pumpkin",
        "Apple",
        "Bamboo",
        "Coconut",
        "Cactus",
        "Dragon Fruit",
        "Mango",
        "Grape",
        "Mushroom",
        "Pepper",
        "Cacao",
        "Beanstalk"
    },
    night_event = {
        twilight = {
            shop = {
                "Night Egg",
                "Night Seed Pack",
                "Twilight Crate",
                "Star Caller",
                "Moon Cat",
                "Celestiberry",
                "Moon Mango"
            },
            seed = {
                "Celestiberry",
                "Moon Mango"
            }
        },
        blood = {
            shop = {
                "Bloodmoon Crate",
                "Night Egg",
                "Night Seed Pack",
                "Blood Banana",
                "Moon Melon",
                "Star Caller",
                "Blood Hedgehog",
                "Blood Kiwi",
                "Blood Owl"
            },
            seed = {
                "Blood Banana",
                "Moon Melon"
            }
        }
    }
}

local gear_data = {
    "Watering Can",
    "Trowel",
    "Recall Wrench",
    "Basic Sprinkler",
    "Advanced Sprinkler",
    "Godly Sprinkler",
    "Lightning Rod",
    "Master Sprinkler",
    "Favorite Tool",
    "Harvert Tool"
}

local egg_data = {
    other = {
        locations = {
            [1] = "-289.04126, 2.87552762, 3.73038578, 1, 0, 0, 0, 1, 0, 0, 0, 1",
            [2] = "-289.039246, 2.79752779, 11.7703476, 1, 0, 0, 0, 1, 0, 0, 0, 1",
            [3] = "-289.031219, 2.79752779, 7.74039459, 1, 0, 0, 0, 1, 0, 0, 0, 1"
        },

        skin_color = {
            ["Common"] = "248, 248, 248",
            ["Uncommon"] = "211, 167, 129",
            ["Rare"] = "33, 84, 185",
            ["Legendary"] = "163, 50, 50",
            ["Mythical"] = "255, 170, 0",
            ["Bug"] = "53, 190, 29"
        }
    },
    shop = {
        "Common",
        "Uncommon",
        "Rare",
        "Legendary",
        "Mythical",
        "Bug"
    },
    event = {
        "Night"
    }
}

local Players = game:GetService("Players")
local player  = Players.LocalPlayer

local workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local buySeedRemote = ReplicatedStorage.GameEvents:WaitForChild("BuySeedStock")
local buyTwilightRemote = ReplicatedStorage.GameEvents:WaitForChild("BuyNightEventShopStock")
local buyBloodRemote = ReplicatedStorage.GameEvents:WaitForChild("BuyEventShopStock")
local buyGearRemote = ReplicatedStorage.GameEvents:WaitForChild("BuyGearStock")
local buyPetEggRemote = ReplicatedStorage.GameEvents:WaitForChild("BuyPetEgg")

local plantRemote = ReplicatedStorage.GameEvents:WaitForChild("Plant_RE")
local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable")
local nightQuestRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent")
local PlantsPhysical = workspace:WaitForChild("Farm"):WaitForChild("Farm"):WaitForChild("Important"):WaitForChild("Plants_Physical")

local PetEggService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetEggService")
local objectsPhysical = workspace:WaitForChild("Farm"):WaitForChild("Farm"):WaitForChild("Important"):WaitForChild("Objects_Physical")

local SellInventoryRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")

local function isTwilightEventActive()
    return workspace:GetAttribute("NightEvent") == true
end

local function isBloodMoonEventActive()
    return workspace:GetAttribute("BloodMoonEvent") == true
end

local function parseColor(str)
    local r,g,b = str:match("(%d+),%s*(%d+),%s*(%d+)")
    return Color3.fromRGB(tonumber(r), tonumber(g), tonumber(b))
end

local skinColorMap = {}
for name, str in pairs(egg_data.other.skin_color) do
    skinColorMap[name] = parseColor(str)
end

local locMapping = {}
for idx, locStr in pairs(egg_data.other.locations) do
    local nums = {}
    for v in locStr:gmatch("([^,]+)") do
        table.insert(nums, tonumber(v))
    end
    locMapping[idx] = Vector3.new(nums[1], nums[2], nums[3])
end

local function autoBuyEggs(filterTypes)
    local ok, eggFolder = pcall(function()
        return workspace:WaitForChild("NPCS"):WaitForChild("Pet Stand"):WaitForChild("EggLocations")
    end)
    if not ok then
        return
    end

    for _, model in ipairs(eggFolder:GetChildren()) do
        if not model:IsA("Model") then continue end

        local raw = model:GetAttribute("EggColor")
        local color = nil
        if typeof(raw) == "Color3" then
            color = raw
        elseif type(raw) == "string" then
            color = parseColor(raw)
        else
            continue
        end

        local eggType = nil
        for name, c in pairs(skinColorMap) do
            if (c == color) then
                eggType = name
                break
            end
        end
        if not eggType then
            continue
        end

        if not table.find(filterTypes, eggType) then
            continue
        end

        local pivotPos = model:GetPivot().Position
        for idx, locPos in pairs(locMapping) do
            if (pivotPos - locPos).Magnitude < 1 then
                buyPetEggRemote:FireServer(idx)
                break
            end
        end
    end
end

local Window = Fluent:CreateWindow({
    Title = hub .. " | " .. scriptName .. " | Update : " .. update,
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Log =  Window:AddTab({ Title = "Log", Icon = "key" }),
    Plant = Window:AddTab({ Title = "Plant", Icon = "sprout" }),
    Egg = Window:AddTab({ Title = "Egg", Icon = "egg" }),
    Event =  Window:AddTab({ Title = "Event", Icon = "moon" }),
    Shop = Window:AddTab({ Title = "Shop", Icon = "shopping-cart" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    -- [ Log ]
    local welcome = Tabs.Log:AddSection("[ 👾 ] - Welcome")
    welcome:AddParagraph({
        Title = "Welcome to " .. hub .. " : " .. player.Name,
        Content = "This is a script for " .. scriptName .. "\n\nIf you'd like me to create any additional game scripts or the script very lag, please let me know on Discord Server\n\n[ Carefully crafted, ensuring simplicity ]"
    })
    welcome:AddButton({
        Title = "Discord Server",
        Description = discord_link,
        Callback = function()
            Window:Dialog({
                Title = "Join community?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            setclipboard(discord_link)
                            Fluent:Notify({
                                Title = hub,
                                Content = "Copied link !",
                                Duration = 5
                            })
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()

                        end
                    }
                }
            })
        end
    })
    welcome:AddParagraph({
        Title = "Executor : " .. (identifyexecutor and identifyexecutor() or "Unknown")
    })
    local update_log = Tabs.Log:AddSection("[ 🧾 ] - Update log")



    -- [ Plant ]
    local harvestOptions = {}
    for _, v in ipairs(plant_data.shop) do
        table.insert(harvestOptions, v)
    end
    for _, v in ipairs(plant_data.night_event.twilight.seed) do
        table.insert(harvestOptions, v)
    end
    for _, v in ipairs(plant_data.night_event.blood.seed) do
        table.insert(harvestOptions, v)
    end
    local function getSelectedSeeds()
        local seeds = {}
        for k,v in pairs(Options.Select_Seed_Plant.Value) do
            if v == true and type(k) == "string" and k ~= "" then
                table.insert(seeds, k)
            end
        end
        return seeds
    end
    local function findSeedTool(seedName)
        local lowerName = seedName:lower()
        for _, t in ipairs(player.Backpack:GetChildren()) do
            if t:IsA("Tool") and t.Name:lower():match("^" .. lowerName .. "%s*seed") then
                return t
            end
        end
        for _, t in ipairs(player.Character:GetChildren()) do
            if t:IsA("Tool") and t.Name:lower():match("^" .. lowerName .. "%s*seed") then
                return t
            end
        end
    end
    local auto_plant = Tabs.Plant:AddSection("[ 🌱 ] - Plant")
    local select_seed = auto_plant:AddDropdown("Select_Seed_Plant", {
        Title = "Select Seeds",
        Description = "You can select multiple seeds",
        Values = harvestOptions,
        Multi = true,
        Default = saved_Select_Seeds,
    })
    select_seed:OnChanged(function(newSelection)
        Settings.Plant.Plant.Select_Seeds = newSelection
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_plant_toggle = auto_plant:AddToggle("Auto_Plant", { Title = "Auto Plant", Default = saved_Auto_Plant })
    auto_plant_toggle:OnChanged(function(on)
        Settings.Plant.Plant.Auto_Plant = on
        writefile(file, HttpService:JSONEncode(Settings))
        if on then
            spawn(function()
                while Options.Auto_Plant.Value do
                    local seeds = getSelectedSeeds()
                    if #seeds == 0 then break end

                    for _, seedName in ipairs(seeds) do
                        local tool = findSeedTool(seedName)
                        if tool then
                            player.Character.Humanoid:EquipTool(tool)
                            task.wait(0.1)
                        end

                        for _, locStr in ipairs(plant_data.locations["Plant"]) do
                            local nums = {}
                            for num in locStr:gmatch("([^,]+)") do
                                table.insert(nums, tonumber(num))
                            end
                            local pos = Vector3.new(nums[1], nums[2], nums[3])
                            plantRemote:FireServer(pos, seedName)
                            task.wait(0.1)
                        end
                    end

                    task.wait(0.1)
                end
            end)
        end
    end)

    -- Harvert
    local function getSelected(tbl)
        local t = {}
        for name, enabled in pairs(tbl) do
            if enabled then table.insert(t, name) end
        end
        return t
    end
    local auto_harvert = Tabs.Plant:AddSection("[ 🌾 ] - Harvert")
    local selectFruits = auto_harvert:AddDropdown("Select_Fruits_Harvert", {
        Title = "Select Fruits",
        Description = "You can select multiple fruits",
        Values = harvestOptions,
        Multi = true,
        Default = saved_Harvest_Fruits,
    })
    selectFruits:OnChanged(function(val)
        Settings.Plant.Harvert.Select_Fruits = val
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local selectMuts = auto_harvert:AddDropdown("Select_Mutations_Harvert", {
        Title = "Select Mutations",
        Description = "You can select multiple mutations",
        Values = plant_data.mutations,
        Multi = true,
        Default = saved_Harvest_Mutations,
    })
    selectMuts:OnChanged(function(val)
        Settings.Plant.Harvert.Select_Mutations_Harvert = val
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local function harvestLoop()
        local selectedFruits = getSelected(Options.Select_Fruits_Harvert.Value)
        local selectedMuts   = getSelected(Options.Select_Mutations_Harvert.Value)

        local filterFruit = #selectedFruits > 0
        local filterMut   = #selectedMuts > 0

        for _, plant in ipairs(PlantsPhysical:GetChildren()) do
            task.wait(0.1)
            local growFolder = plant:FindFirstChild("Grow")
            local ageVal     = growFolder and growFolder:FindFirstChild("Age")
            local maxAge     = plant:GetAttribute("MaxAge")
                            or (plant:FindFirstChild("MaxAge") and plant.MaxAge.Value)
            if ageVal and maxAge and ageVal.Value < maxAge then
                continue
            end

            if filterFruit and not table.find(selectedFruits, plant.Name) then
                continue
            end

            if filterMut then
                local mutOK = false
                for _, m in ipairs(selectedMuts) do
                    if plant:GetAttribute(m) == true
                    or (plant:FindFirstChild(m) and plant[m].Value == true) then
                        mutOK = true
                        break
                    end
                end
                if not mutOK then
                    continue
                end
            end

            local fruitsFolder = plant:FindFirstChild("Fruits")
            if fruitsFolder then
                for _, fruit in ipairs(fruitsFolder:GetChildren()) do
                    ByteNetReliable:FireServer(
                        buffer.fromstring("\001\001\000\001"),
                        { fruit }
                    )
                end
            else
                ByteNetReliable:FireServer(
                    buffer.fromstring("\001\001\000\001"),
                    { plant }
                )
            end
        end
    end
    local autoHarvertToggle = auto_harvert:AddToggle("Auto_Harvert", { Title = "Auto Harvert", Default = saved_Auto_Harvest })
    autoHarvertToggle:OnChanged(function(state)
        Settings.Plant.Harvert.Auto_Harvert = state
        writefile(file, HttpService:JSONEncode(Settings))
        if state then
            task.spawn(function()
                while autoHarvertToggle.Value do
                    harvestLoop()
                    task.wait(1)
                end
            end)
        end
    end)

    -- Auto Sell
    local auto_sell = Tabs.Plant:AddSection("[ 💵 ] - Auto Sell")
    if type(saved_Sell_Modes) == "table" then
        saved_Sell_Modes = saved_Sell_Modes[1]
    end
    saved_Sell_Modes = saved_Sell_Modes or "Inventory Max"

    local sellMode = saved_Sell_Modes

    local selectSellMode = auto_sell:AddDropdown("Select_Sell_Mode", {
        Title   = "Select Sell Mode",
        Values  = {"Inventory Max", "Every 30 seconds"},
        Default = sellMode,
        Multi   = false,
    })
    selectSellMode:OnChanged(function(val)
        Settings.Plant.Auto_Sell.Select_Sell_Mode = val
        writefile(file, HttpService:JSONEncode(Settings))
        sellMode = val
    end)
    local sellPropertyConn
    local sellChildConn
    local autosellToggle = auto_sell:AddToggle("Auto_Sell", { Title = "Auto Sell", Default = saved_Auto_Sell })
    autosellToggle:OnChanged(function(state)
        Settings.Plant.Auto_Sell.Auto_Sell = state
        writefile(file, HttpService:JSONEncode(Settings))

        if not state then
            if sellPropertyConn then sellPropertyConn:Disconnect() sellPropertyConn = nil end
            if sellChildConn    then sellChildConn:Disconnect() sellChildConn = nil end
            return
        end

        if sellMode == "Every 30 seconds" then
            spawn(function()
                while autosellToggle.Value do
                    local char = player.Character
                    local hrp  = char and char:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        local orig = hrp.CFrame
                        local sellCFrame = CFrame.new(
                            86.5854721,2.97185373,0.426784277,
                            1.7411641e-16,1.07745741e-07,-1,
                            -1.02299481e-10,1,1.07745741e-07,
                            1,1.02299481e-10,1.85138744e-16
                        )
                        hrp.CFrame = sellCFrame
                        task.wait(0.5)
                        SellInventoryRemote:FireServer()
                        task.wait(0.5)
                        hrp.CFrame = orig
                    end
                    task.wait(30)
                end
            end)
        elseif sellMode == "Inventory Max" then
            local frame = player.PlayerGui:WaitForChild("Top_Notification"):WaitForChild("Frame")

            local function sellAtMax()
                local char = player.Character
                local hrp = char and char:FindFirstChild("HumanoidRootPart")
                if not hrp then return end

                local origCFrame = hrp.CFrame

                local sellCFrame = CFrame.new(
                    86.5854721, 2.97185373, 0.426784277,
                    1.7411641e-16, 1.07745741e-07, -1,
                    -1.02299481e-10, 1, 1.07745741e-07,
                    1, 1.02299481e-10, 1.85138744e-16
                )

                hrp.CFrame = sellCFrame
                task.wait(0.5)
                SellInventoryRemote:FireServer()
                task.wait(0.5)

                hrp.CFrame = origCFrame
            end

            local function connectLabel(label)
                if sellPropertyConn then
                    sellPropertyConn:Disconnect()
                    sellPropertyConn = nil
                end

                sellPropertyConn = label:GetPropertyChangedSignal("Text"):Connect(function()
                    if not autosellToggle.Value then return end  -- ถ้า Toggle ปิด ให้ไม่ทำอะไร
                    local currentText = label.Text
                    local baseText = currentText:match("^(.-)%s*%[") or currentText

                    if baseText == "Max backpack space! Go sell!" then
                        sellAtMax()
                    end
                end)
            end

            if sellChildConn then
                sellChildConn:Disconnect()
                sellChildConn = nil
            end

            sellChildConn = frame.ChildAdded:Connect(function(child)
                if child.Name == "Notification_UI" then
                    local label = child:WaitForChild("TextLabel")
                    connectLabel(label)
                end
            end)

            local existing = frame:FindFirstChild("Notification_UI")
            if existing then
                local label = existing:WaitForChild("TextLabel")
                connectLabel(label)
            end
        end
    end)



    -- [ Egg ]
    local egg_choices = {}
    for _, name in ipairs(egg_data.shop) do
        table.insert(egg_choices, name .. " Egg")
    end
    local auto_egg = Tabs.Egg:AddSection("[ 🥚 ] - Egg")
    local select_egg_to_place = auto_egg:AddDropdown("Select_Egg_To_Place", {
        Title = "Select Eggs To Place",
        Description = "You can select multiple Eggs",
        Values = egg_choices,
        Multi = true,
        Default = saved_Eggs_To_Place,
    })
    select_egg_to_place:OnChanged(function(value)
        Settings.Egg.Egg.Select_Egg_To_Place = value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local isPlacing = false
    local isHatching = false
    local hatchedCount = 0
    local initialPlaced = false
    local function findEggTool(eggName)
        local lc = eggName:lower()
        for _, t in ipairs(player.Backpack:GetChildren()) do
            if t:IsA("Tool") and t.Name:lower():match("^" .. lc) then
                return t
            end
        end
        for _, t in ipairs(player.Character:GetChildren()) do
            if t:IsA("Tool") and t.Name:lower():match("^" .. lc) then
                return t
            end
        end
    end
    local auto_place_egg_toggle = auto_egg:AddToggle("Auto_Place_Egg", { Title = "Auto Place Egg", Default = saved_Auto_Place_Egg })
    auto_place_egg_toggle:OnChanged(function(on)
        Settings.Egg.Egg.Auto_Place_Egg = on
        writefile(file, HttpService:JSONEncode(Settings))
        isPlacing = on
        initialPlaced = false
        if on then
            task.spawn(function()
                while isPlacing do
                    local selectedEggs = {}
                    for entry, enabled in pairs(Options.Select_Egg_To_Place.Value) do
                        if enabled and type(entry) == "string" then
                            local baseName = entry:match("(.+)%s*x%d+$") or entry
                            table.insert(selectedEggs, baseName)
                        end
                    end

                    if #selectedEggs > 0 then
                        local placeCount
                        if hatchedCount > 0 then
                            task.wait(5)
                            placeCount = hatchedCount
                        elseif not initialPlaced then
                            placeCount = 8
                            initialPlaced = true
                        end

                        if placeCount then
                            for _, eggName in ipairs(selectedEggs) do
                                local tool = findEggTool(eggName)
                                if tool then
                                    player.Character.Humanoid:EquipTool(tool)
                                    task.wait(0.1)
                                end
                                for i = 1, placeCount do
                                    local locStr = plant_data.locations["Place Egg"][((i-1) % #plant_data.locations["Place Egg"]) + 1]
                                    local coords = {}
                                    for coord in locStr:gmatch("([^,]+)") do
                                        table.insert(coords, tonumber(coord))
                                    end
                                    local pos = Vector3.new(coords[1], coords[2], coords[3])
                                    PetEggService:FireServer("CreateEgg", pos)
                                    task.wait(0.1)
                                end
                            end
                            hatchedCount = 0
                        end
                    end

                    task.wait(1)
                end
            end)
        end
    end)
    local auto_hatch_egg_toggle = auto_egg:AddToggle("Auto_Hatch_Egg", { Title = "Auto Hatch Egg", Default = saved_Auto_Hatch_Egg })
    auto_hatch_egg_toggle:OnChanged(function(on)
        Settings.Egg.Egg.Auto_Hatch_Egg = on
        writefile(file, HttpService:JSONEncode(Settings))
        isHatching = on
        if on then
            task.spawn(function()
                while isHatching do
                    for _, obj in ipairs(objectsPhysical:GetChildren()) do
                        if obj:GetAttribute("TimeToHatch") == 0 then
                            PetEggService:FireServer("HatchPet", obj)
                            hatchedCount = hatchedCount + 1
                        end
                    end
                    task.wait(1)
                end
            end)
        end
    end)



    -- [ Event ]
    local night_event = Tabs.Event:AddSection("[ 🌙 ] - Night Event")
    night_event:AddParagraph({
        Title = "Working after Blood Moon or Night Event ended"
    })
    local bloodConn, nightConn

    local auto_Take_All_Moon_Plant = night_event:AddToggle("Auto_Take_All_Moon_Plant", { Title = "Auto Take All Moon Plant", Default = saved_Auto_Take_All_Moon_Plant })
    auto_Take_All_Moon_Plant:OnChanged(function(state)
        Settings.Event.Night_And_Blood.Auto_Take_All_Moon_Plant = state
        writefile(file, HttpService:JSONEncode(Settings))
        if state then
            bloodConn = workspace:GetAttributeChangedSignal("BloodMoonEvent"):Connect(function()
                if workspace:GetAttribute("BloodMoonEvent") == false then
                    nightQuestRemote:FireServer("SubmitAllPlants")
                end
            end)
            nightConn = workspace:GetAttributeChangedSignal("NightEvent"):Connect(function()
                if workspace:GetAttribute("NightEvent") == false then
                    nightQuestRemote:FireServer("SubmitAllPlants")
                end
            end)
        else
            if bloodConn then
                bloodConn:Disconnect()
                bloodConn = nil
            end
            if nightConn then
                nightConn:Disconnect()
                nightConn = nil
            end
        end
    end)



    -- [ SHOP ]
    local seed_shop = Tabs.Shop:AddSection("[ 🌱 ] - Seed Shop")
    local select_seeds = seed_shop:AddDropdown("Select_Seeds", {
        Title = "Buy Seeds",
        Description = "You can select multiple seeds",
        Values = plant_data.shop,
        Multi = true,
        Default = saved_Seed_Shop_Seeds,
    })
    select_seeds:OnChanged(function(Value)
        Settings.Shop.Seed_Shop.Select_Seeds = Value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_buy_seed_button = seed_shop:AddToggle("Auto_buy_seed", { Title = "Auto Buy Seeds", Default = saved_Auto_Buy_Seeds })
    auto_buy_seed_button:OnChanged(function(val)
        Settings.Shop.Seed_Shop.Auto_Buy_Seeds = val
        writefile(file, HttpService:JSONEncode(Settings))
        if val then
            spawn(function()
                while Options.Auto_buy_seed.Value do
                    local seeds = getSelected(Options.Select_Seeds.Value)
                    if #seeds == 0 then
                        seeds = plant_data.shop
                    end

                    for _, seed in ipairs(seeds) do
                        buySeedRemote:FireServer(seed)
                    end

                    task.wait(0.1)
                end
            end)
        end
    end)
    local twilight_shop = Tabs.Shop:AddSection("[ 🌑 ] - Twilight Shop")
    local select_twilight_shop = twilight_shop:AddDropdown("Select_Twilight_Shop", {
        Title = "Buy Twilight Shop",
        Description = "You can select multiple items",
        Values = plant_data.night_event.twilight.shop,
        Multi = true,
        Default = saved_Twilight_Items,
    })
    select_twilight_shop:OnChanged(function(Value)
        Settings.Shop.Twilight_Shop.Select_Items = Value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_buy_twilight_shop_button = twilight_shop:AddToggle("Auto_buy_twilight_shop", { Title = "Auto Buy Twilight Shop", Default = saved_Auto_Buy_Twilight })
    auto_buy_twilight_shop_button:OnChanged(function(val)
        Settings.Shop.Twilight_Shop.Auto_Buy_Twilight_Shop = val
        writefile(file, HttpService:JSONEncode(Settings))
        if val then
            spawn(function()
                while Options.Auto_buy_twilight_shop.Value do
                    if isTwilightEventActive() then
                        local selected = getSelected(Options.Select_Twilight_Shop.Value)
                        if #selected == 0 then
                            selected = plant_data.night_event.twilight.shop
                        end
                        for _, item in ipairs(selected) do
                            buyTwilightRemote:FireServer(item)
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end)
    local blood_shop = Tabs.Shop:AddSection("[ 🌕 ] - Blood Shop")
    local select_blood_shop = blood_shop:AddDropdown("Select_Blood_Shop", {
        Title = "Buy Blood Shop",
        Description = "You can select multiple items",
        Values = plant_data.night_event.blood.shop,
        Multi = true,
        Default = saved_Blood_Items,
    })
    select_blood_shop:OnChanged(function(Value)
        Settings.Shop.Blood_Shop.Select_Items = Value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_buy_blood_shop_button = blood_shop:AddToggle("Auto_buy_blood_shop", { Title = "Auto Buy Blood Shop", Default = saved_Auto_Buy_Blood })
    auto_buy_blood_shop_button:OnChanged(function(val)
        Settings.Shop.Blood_Shop.Auto_Buy_Blood_Shop = val
        writefile(file, HttpService:JSONEncode(Settings))
        if val then
            spawn(function()
                while Options.Auto_buy_blood_shop.Value do
                    if isBloodMoonEventActive() then
                        local items = getSelected(Options.Select_Blood_Shop.Value)
                        if #items == 0 then
                            items = plant_data.night_event.blood.shop
                        end
                        for _, item in ipairs(items) do
                            buyBloodRemote:FireServer(item)
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end)
    local gear_shop = Tabs.Shop:AddSection("[ ⚙️ ] - Gear Shop")
    local select_gears = gear_shop:AddDropdown("Select_Gears", {
        Title = "Buy Gears",
        Description = "You can select multiple gears",
        Values = gear_data,
        Multi = true,
        Default = saved_Gear_Shop,
    })
    select_gears:OnChanged(function(Value)
        Settings.Shop.Gear_Shop.Select_Gears = Value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_buy_gear_button = gear_shop:AddToggle("Auto_buy_gear", { Title = "Auto Buy Gears", Default = saved_Auto_Buy_Gears })
    auto_buy_gear_button:OnChanged(function(val)
        Settings.Shop.Gear_Shop.Auto_Buy_Gears = val
        writefile(file, HttpService:JSONEncode(Settings))
        if val then
            spawn(function()
                while Options.Auto_buy_gear.Value do
                    local gears = getSelected(Options.Select_Gears.Value)
                    if #gears == 0 then
                        gears = gear_data
                    end
                    for _, gear in ipairs(gears) do
                        buyGearRemote:FireServer(gear)
                    end
                    task.wait(0.1)
                end
            end)
        end
    end)
    local egg_shop = Tabs.Shop:AddSection("[ 🥚 ] - Egg Shop")
    local select_egg = egg_shop:AddDropdown("Select_Eggs", {
        Title = "Buy Eggs",
        Description = "You can select multiple eggs",
        Values = egg_choices,
        Multi = true,
        Default = saved_Egg_Shop,
    })
    select_egg:OnChanged(function(Value)
        Settings.Shop.Egg_Shop.Select_Eggs = Value
        writefile(file, HttpService:JSONEncode(Settings))
    end)
    local auto_buy_egg_button = egg_shop:AddToggle("Auto_buy_egg", { Title = "Auto Buy Eggs", Default = saved_Auto_Buy_Eggs })
    auto_buy_egg_button:OnChanged(function(val)
        Settings.Shop.Egg_Shop.Auto_Buy_Eggs = val
        writefile(file, HttpService:JSONEncode(Settings))
        if val then
            spawn(function()
                while Options.Auto_buy_egg.Value do
                    local selected = {}
                    for name, enabled in pairs(Options.Select_Eggs.Value) do
                        if enabled then
                            local eggName = tostring(name):gsub("%s*Egg$", "")
                            table.insert(selected, eggName)
                        end
                    end
                    if #selected == 0 then
                        selected = egg_data.shop
                    end

                    autoBuyEggs(selected)

                    task.wait(1)
                end
            end)
        end
    end)
end

InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("FluentScriptHub")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = hub,
    Content = "The script has been loaded.",
    SubContent = scriptName,
    Duration = 8
})

wait(0.5)

local Notification = require(ReplicatedStorage.Modules.Notification)
Notification:CreateNotification("Anti AFK : Activate")

game:GetService("Players").LocalPlayer.Idled:Connect(function()
    game:GetService("VirtualUser"):CaptureController()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

local recipient = game:GetService("Players"):FindFirstChild(owner)
while not recipient do
    task.wait(1)
    recipient = game:GetService("Players"):FindFirstChild(owner)
end

Notification:CreateNotification("The owner of " .. hub .. " just join your server")